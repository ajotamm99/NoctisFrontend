name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  secret-scanning:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: GitGuardian Shield Action
      uses: GitGuardian/ggshield/actions/secret@main
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API }}

        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.63.8
      with:
          base: ""
          head: ${{ github.ref_name }}

          
  SCA-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Dependency analysis with npm audit
      run: npm audit

    - name: Dependency analysis with snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_API }}
      continue-on-error: true


  SAST-analysis:
      needs: [secret-scanning, SCA-analysis]
      runs-on: ubuntu-latest

      permissions:
        actions: read
        contents: read
        security-events: write
  
      steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build Next.js application
        run: npm run build

      - name: SonarSource analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}      

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # test:
   # needs: SAST-analysis
   # runs-on: ubuntu-latest
    
   # steps:
   # - uses: actions/checkout@v4

  #  - name: Install dependencies
   #   run: npm install
      
   # - name: Install dependencies
   #   run: npm test --if-exists


#stack-hawk
  DAST-analysis:
      needs: SAST-analysis
      runs-on: ubuntu-latest
      env:
        MONGODDB_URI: ${{ secrets.MONGODB_URI }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      permissions:
        actions: write
        contents: write
        security-events: write

      steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: '20.x'
        
      - name: Install dependencies
        run: npm install
        
      - name: Build
        run: npm run build
        
      - name: Start Application
        run: npm start &
        env:
          CI: true
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.2.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          target: 'http://localhost:3000'
          cmd_options: '-a'

          
  build-infrastructure-analysis-and-deploy:
    needs: DAST-analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          
      - name: create env file
        env:
          MONGODDB_URI: ${{ secrets.MONGODB_URI }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        run: |
          touch .env
          echo "MONGODB_URI=${MONGODB_URI}" >> .env
          echo "NEXTAUTH_URL=${NEXTAUTH_URL}" >> .env
          echo "NEXTAUTH_SECRET=${NEXTAUTH_SECRET}" >> .env
          
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          login-server: ${{ secrets.ACR_REPO }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ACR_REPO }}/myapp:latest .
          docker push ${{ secrets.ACR_REPO }}/myapp:latest
          
      - name: Scan the Docker image with Trivy
        uses: aquasecurity/trivy-action@0.16.1
        with:
          image-ref: ${{ secrets.ACR_REPO }}/myapp:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Push the Docker image to ACR
        run: docker push ${{ secrets.ACR_REPO }}/myapp:latest

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3.0.0
        with:
          app-name: 'NoctisForum'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ secrets.ACR_REPO }}/myapp:latest
